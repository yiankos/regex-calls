AppType=StandardJava
Build1=Default,b4j.example
File1=info
FileGroup1=Default Group
Group=Default Group
Library1=jcore
Library2=jpoi
Library3=json
Library4=xlutils
Library5=minihtmlparser
NumberOfFiles=1
NumberOfLibraries=5
NumberOfModules=0
Version=10.2
@EndOfDesignText@
'Non-UI application (console / server application)
#Region Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True 
#End Region

Sub Process_Globals
	
End Sub

Sub AppStart (Args() As String)
	Private filename As String = "Messages (1-4000)"
	Dim html As String = File.ReadString(File.DirAssets, filename & ".html")

	' Optional: print TableData0 locations
	Dim htmlLines() As String = Regex.Split("\n", html)
	For Each line As String In htmlLines
		If line.ToLowerCase.Contains("tabledata0") Then
			Log("MATCH: " & line)
		End If
	Next

	' Extract the full JS array string
	Dim jsonArrayText As String = ExtractTableDataArray(html, "TableData0")

	' 🔧 Fix invalid escape sequences and cleanup
	jsonArrayText = jsonArrayText.Replace("N\\A", "N/A")
	jsonArrayText = jsonArrayText.Replace("\\", "\") ' double slashes in file paths

	' Parse JSON
	Dim jp As JSONParser
	jp.Initialize(jsonArrayText)
	Dim items As List = jp.NextArray

	' Show count
	Log("✅ Total items: " & items.Size)

	Dim xl As XLUtils
	xl.Initialize

	Dim Workbook As XLWorkbookWriter = xl.CreateWriterBlank
	Dim sheet1 As XLSheetWriter = Workbook.CreateSheetWriterByName("Sheet1")
	
	'CALLS
'	sheet1.PutString(xl.AddressName("A1"),"idx")
'	sheet1.PutString(xl.AddressName("B1"),"Direction")
'	sheet1.PutString(xl.AddressName("C1"),"Source")
'	sheet1.PutString(xl.AddressName("D1"),"Type")
'	sheet1.PutString(xl.AddressName("E1"),"Time stamp (Athens)")
'	sheet1.PutString(xl.AddressName("F1"),"Duration")
'	sheet1.PutString(xl.AddressName("G1"),"FromName")
'	sheet1.PutString(xl.AddressName("H1"),"From")
'	sheet1.PutString(xl.AddressName("I1"),"ToName")
'	sheet1.PutString(xl.AddressName("J1"),"To")
'	sheet1.PutString(xl.AddressName("K1"),"Details")
	
	'MESSAGES
	sheet1.PutString(xl.AddressName("A1"),"idx")
	sheet1.PutString(xl.AddressName("B1"),"Direction")
	sheet1.PutString(xl.AddressName("C1"),"Source")
	sheet1.PutString(xl.AddressName("D1"),"Type")
	sheet1.PutString(xl.AddressName("E1"),"Time stamp (Athens)")
	sheet1.PutString(xl.AddressName("F1"),"Text")
	sheet1.PutString(xl.AddressName("G1"),"Text (translated)")
	sheet1.PutString(xl.AddressName("H1"),"FromName")
	sheet1.PutString(xl.AddressName("I1"),"From")
	sheet1.PutString(xl.AddressName("J1"),"ToName")
	sheet1.PutString(xl.AddressName("K1"),"To")
	sheet1.PutString(xl.AddressName("L1"),"Coordinates")

	'CONTACTS
'	sheet1.PutString(xl.AddressName("A1"),"idx")
'	sheet1.PutString(xl.AddressName("B1"),"Type")
'	sheet1.PutString(xl.AddressName("C1"),"Contact")
'	sheet1.PutString(xl.AddressName("D1"),"Deleted")
'	sheet1.PutString(xl.AddressName("E1"),"Calls")
'	sheet1.PutString(xl.AddressName("F1"),"Messages")
'	sheet1.PutString(xl.AddressName("G1"),"Phones & Emails")
'	sheet1.PutString(xl.AddressName("H1"),"Internet")
'	sheet1.PutString(xl.AddressName("I1"),"Addresses")
'	sheet1.PutString(xl.AddressName("J1"),"Other")
'	sheet1.PutString(xl.AddressName("K1"),"Photos")
'	sheet1.PutString(xl.AddressName("L1"),"Source")
	
	Dim Row1Based As Int = 1

	' Print a few rows
	For Each m As Map In items
		Log("idx: " & m.Get("idx"))
		Log("From: " & m.Get("From"))
		Log("To: " & m.Get("To"))
		Log("Source: " & m.Get("Source"))
				
		Row1Based = Row1Based + 1
		
'		CALLS
'		sheet1.PutNumber(xl.AddressOne("A",Row1Based),m.Get("idx"))
'		sheet1.PutString(xl.AddressOne("B",Row1Based),m.Get("Direction"))
'		sheet1.PutString(xl.AddressOne("C",Row1Based),m.Get("Source"))
'		sheet1.PutString(xl.AddressOne("D",Row1Based),m.Get("Type"))
'		sheet1.PutString(xl.AddressOne("E",Row1Based),m.Get("Timestamp"))
'		sheet1.PutString(xl.AddressOne("F",Row1Based),m.Get("Description"))
'		Private from() As String = Regex.Split("&lt;",m.Get("From").As(String).Replace("&gt;",""))
'		Private Too() As String = Regex.Split("&lt;",m.Get("To").As(String).Replace("&gt;",""))
'		If from.Length-1=0 Then
'			sheet1.PutString(xl.AddressOne("G",Row1Based),from(0))
'			sheet1.PutString(xl.AddressOne("H",Row1Based),"")
'		Else
'			sheet1.PutString(xl.AddressOne("G",Row1Based),from(0))
'			sheet1.PutString(xl.AddressOne("H",Row1Based),from(1))
'		End If
'		If Too.Length-1=0 Then
'			sheet1.PutString(xl.AddressOne("I",Row1Based),Too(0))
'			sheet1.PutString(xl.AddressOne("J",Row1Based),"")
'		Else
'			sheet1.PutString(xl.AddressOne("I",Row1Based),Too(0))
'			sheet1.PutString(xl.AddressOne("J",Row1Based),Too(1))
'		End If
'		sheet1.PutString(xl.AddressOne("K",Row1Based),m.Get("Coords"))
		
		'MESSAGES
		sheet1.PutNumber(xl.AddressOne("A",Row1Based),m.Get("idx"))
		sheet1.PutString(xl.AddressOne("B",Row1Based),m.Get("Direction"))
		sheet1.PutString(xl.AddressOne("C",Row1Based),m.Get("Source"))
		sheet1.PutString(xl.AddressOne("D",Row1Based),m.Get("Type"))
		sheet1.PutString(xl.AddressOne("E",Row1Based),m.Get("Timestamp"))
		sheet1.PutString(xl.AddressOne("F",Row1Based),m.Get("Description"))
		sheet1.PutString(xl.AddressOne("G",Row1Based),m.Get("DescriptionTransl"))
		Private from() As String = Regex.Split("&lt;",m.Get("From").As(String).Replace("&gt;",""))
		Private Too() As String = Regex.Split("&lt;",m.Get("To").As(String).Replace("&gt;",""))
		If from.Length-1=0 Then
			sheet1.PutString(xl.AddressOne("H",Row1Based),from(0))
			sheet1.PutString(xl.AddressOne("I",Row1Based),"")
		Else
			sheet1.PutString(xl.AddressOne("H",Row1Based),from(0))
			sheet1.PutString(xl.AddressOne("I",Row1Based),from(1))
		End If
		If Too.Length-1=0 Then
			sheet1.PutString(xl.AddressOne("J",Row1Based),Too(0))
			sheet1.PutString(xl.AddressOne("K",Row1Based),"")
		Else
			sheet1.PutString(xl.AddressOne("J",Row1Based),Too(0))
			sheet1.PutString(xl.AddressOne("K",Row1Based),Too(1))
		End If
		If m.Get("Coords").As(String).IndexOf($"""$)<>-1 Then
			Log(m.Get("Coords").As(String).IndexOf($"""$))
			sheet1.PutString(xl.AddressOne("L",Row1Based),m.Get("Coords").As(String).SubString2(m.Get("Coords").As(String).IndexOf($"""$),m.Get("Coords").As(String).IndexOf2($"""$,10)))
		Else
			sheet1.PutString(xl.AddressOne("L",Row1Based),m.Get("Coords"))
		End If

		'CONTACTS
'		Private contact As String = m.Get("Contact").As(String)
'		contact.SubString2(contact.IndexOf(">"),contact.IndexOf2("<",3))
'		contact.Replace($"<br/><br/></div><div style=\"color: #008080;\">"$,"")
'		contact.Replace($"<br/></div><div style=\"color: #000000;\">"$,"")
'		contact.Replace($"</div>""$,"")
		
	
		Dim res As Map = ExtractSourceAndClean(m.Get("Contact").As(String))
		Log("Cleaned Text:")
		Log(res.Get("Text"))
		Log("Extracted Source:")
		Log(res.Get("Source"))
		Log("-------------------")
		
		
'		sheet1.PutNumber(xl.AddressOne("A",Row1Based),m.Get("idx"))
'		sheet1.PutString(xl.AddressOne("B",Row1Based),m.Get("Type"))
'		sheet1.PutString(xl.AddressOne("C",Row1Based),res.Get("Text"))
'		sheet1.PutString(xl.AddressOne("D",Row1Based),m.Get("ExpDeleted"))
'		sheet1.PutString(xl.AddressOne("E",Row1Based),RemoveHtmlTags(m.Get("Calls")))
'		sheet1.PutString(xl.AddressOne("F",Row1Based),RemoveHtmlTags(m.Get("Messages")))
'		sheet1.PutString(xl.AddressOne("G",Row1Based),RemoveHtmlTags(m.Get("PhonesEmails")))
'		sheet1.PutString(xl.AddressOne("H",Row1Based),RemoveHtmlTags(m.Get("Internet").As(String)))
'		sheet1.PutString(xl.AddressOne("I",Row1Based),RemoveHtmlTags(m.Get("Adresses").As(String)))
'		sheet1.PutString(xl.AddressOne("J",Row1Based),m.Get("Other"))
'		sheet1.PutString(xl.AddressOne("L",Row1Based),res.Get("Source"))
'		sheet1.PutString(xl.AddressOne("K",Row1Based),m.Get("Photos").As(String).SubString2(m.Get("Photos").As(String).IndexOf("\"),m.Get("Photos").As(String).IN))
	Next
	
	Workbook.SaveAs(File.DirApp,filename & ".xlsx",True)
	
End Sub


Sub ExtractTableDataArray(html As String, varName As String) As String
	Dim lines() As String = Regex.Split("\n", html)
	Dim isInArray As Boolean = False
	Dim sb As StringBuilder
	sb.Initialize
	For Each line As String In lines
		If Not(isInArray) And line.Contains("var " & varName & " =") Then
			' Start collecting from the first "[" character
			Dim startIdx As Int = line.IndexOf("[")
			If startIdx > -1 Then
				sb.Append(line.SubString(startIdx)).Append(CRLF)
				isInArray = True
			End If
		Else If isInArray Then
			If line.Trim.StartsWith("];") Then
				' Just close the array
				sb.Append("]").Append(CRLF)
				Exit
			Else
				sb.Append(line).Append(CRLF)
			End If
		End If
	Next
	Return sb.ToString.Trim
End Sub

Sub RemoveHtmlTags(Html As String) As String
	' Replace line breaks
	Html = Html.Replace("<br/>", CRLF).Replace("<br>", CRLF)

	' Optional: Replace <wbr> with empty string
	Html = Html.Replace("<wbr>", "")
	
	Html = Html.Replace("Phone number: ", "")

	Html = Html.Replace("Email: ", "")
	
	Html = Html.Replace("Telegram ID: ", "")
	
	Html = Html.Replace("Address: ", "")

	' Remove all other HTML tags
	Dim cleaned As String = Regex.Replace("<[^>]+>", Html, "")
    
	Return cleaned.Trim
End Sub

Sub ExtractSourceAndClean(Html As String) As Map
	Dim result As Map
	result.Initialize

	' Step 1: Normalize <br/> and <wbr>
	Html = Html.Replace("<br/>", CRLF).Replace("<br>", CRLF).Replace("<wbr>", "")

	' Step 2: Remove all HTML tags
	Dim cleaned As String = Regex.Replace("<[^>]+>", Html, "").Trim

	' Step 3: Split lines
	Dim lines() As String = Regex.Split(CRLF, cleaned)

	' Step 4: Find and extract Source
	Dim sourceValue As String = ""
	Dim sb As StringBuilder
	sb.Initialize

	For i = 0 To lines.Length - 1
		Dim line As String = lines(i).Trim
		If line.ToLowerCase = "source:" And i < lines.Length - 1 Then
			sourceValue = lines(i + 1).Trim
			i = i + 1 ' skip the value too
		Else
			sb.Append(line).Append(CRLF)
		End If
	Next

	result.Put("Text", sb.ToString.Trim)
	result.Put("Source", sourceValue)

	Return result
End Sub



